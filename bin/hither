#!/usr/bin/env bash
#
# hither: Database Munging Swiss Army Chainsaw
#
# Copyright (c) 2015 Ingy döt Net

set -e

source "$(cd -P `dirname $BASH_SOURCE` && pwd -P)/../lib/bash+.bash"
bash+:import :std can

OPTIONS_SPEC="\
hither [<action>] <options> <arguments>

Try 'hither help' for more help.

Options:
--
h,help      Show the hither usage summary
 
i,in=       Input: File, URL or DB
o,out=      Output: File or DB
f,from=     Input data/database/hither type
t,to=       Output data/datbase/hither type
 
a,action=   Explicit hither action/command verb
w,with=     Alternative methodology for action
 
p,profile=  Shell profile to be sourced
m,metadata= Data file w/ info to make targets
 
q,quiet     Show minimal output
v,verbose   Show verbose output
D,debug     Show maximum DEBUG info
"

main() {
  local OK=0

  init-env
  get-opts "$@"
  set-vars
  check-profile

  if [ -n "$HITHER_ACTION" ]; then
    if can "action:$HITHER_ACTION"; then
      "action:$HITHER_ACTION" "${action_arguments[@]}"
      return
    elif $(type "hither-cmd-$HITHER_ACTION" &>/dev/null); then
      "hither-cmd-$HITHER_ACTION" "${action_arguments[@]}"
      return
    fi
  fi

  create-action-command
  if $(type "$HITHER_LIB/$command" &>/dev/null); then
    "$HITHER_LIB/$command" "${action_arguments[@]}"
  else
    error "Unsupported hither action: '$command'"
  fi
}

init-env() {
  sha1sum=sha1sum
  shopt_opt='shopt -s nullglob globstar'
  if [[ "$OSTYPE" =~ ^darwin|^freebsd ]]; then
    sha1sum=shasum
    shopt_opt='shopt -s nullglob'
  fi

  assert-command curl cut git grep head ln mv readlink "$sha1sum" tr

  export HITHER_QUIET="${HITHER_QUIET:-false}"
  export HITHER_VERBOSE="${HITHER_VERBOSE:-false}"
  export HITHER_DEBUG="${HITHER_DEBUG:-false}"
}

get-opts() {
  [ $# -eq 0 ] && set -- --help

  eval "$(
    echo "$OPTIONS_SPEC" |
      git rev-parse --parseopt -- "$@" ||
    echo exit $?
  )"

  local in1=false
  while [ $# -gt 0 ]; do
    local option="$1"; shift
    case "$option" in
      -i)
        set-in "$1"
        in1=true
        shift
        ;;
      -o)
        set-out "$1"
        shift
        ;;
      -f)
        export HITHER_FROM="$1"
        shift
        ;;
      -t)
        export HITHER_TO="$1"
        shift
        ;;

      -a)
        export HITHER_ACTION="$1"
        shift
        ;;
      -w)
        export HITHER_WITH="$1"
        shift
        ;;

      -p)
        export HITHER_PROFILE="$1"
        shift
        ;;
      -m)
        export HITHER_METADATA="$1"
        shift
        ;;

      -q) export HITHER_QUIET=true ;;
      -v) export HITHER_VERBOSE=true ;;
      -D) export HITHER_DEBUG=true ;;

      --) break ;;

      *) error "unexpected option '$option'" ;;
    esac
  done

  if [ -z "$HITHER_ACTION" ]; then
    if [ $# -gt 0 ]; then
      HITHER_ACTION="$1"; shift
    fi
  fi

  action_arguments=("$@")
}

set-in() {
  local val="$1"
  local in_out= from_to=
  $in1 && in_out=IN2 || in_out=IN
  $in1 && from_to=FROM2 || from_to=FROM
  printf -v "HITHER_$in_out" "$val"
  export "HITHER_$in_out"
  if [[ "$val" =~ ^https?: ]]; then
    set-vars-from-url "$val"
  elif [[ "$val" =~ ^([a-z]+):// ]]; then
    set-vars-from-conninfo-uri "$val"
  elif [[ "$val" =~ ^.*\.(csv|hmd|hsd|sql)$ ]]; then
    set-vars-from-filename "$val" "${BASH_REMATCH[1]}"
  else
    error "Invalid value for '--input=$val'."
  fi
}

set-out() {
  local val="$1"
  export HITHER_OUT="$val"
  local in_out=OUT from_to=TO
  if [[ "$val" =~ ^https?: ]]; then
    error "Can't use URL for output"
  elif [[ "$val" =~ ^([a-z]+):// ]]; then
    set-vars-from-conninfo-uri "$val"
  elif [[ "$val" =~ ^.*\.(csv|hmd|hsd|sql|py)$ ]]; then
    set-vars-from-filename "$val" "${BASH_REMATCH[1]}"
  else
    error "Invalid value for '--output=$val'."
  fi
}

set-vars-from-filename() {
  local path="$1" ext="$2"
  printf -v "HITHER_$from_to" "$ext"
  export "HITHER_$from_to"
  printf -v "HITHER_$in_out" "$path"
  export "HITHER_$in_out"
}

set-vars-from-url() {
  local url="$1"
  printf -v "HITHER_$in_out" "$url"
  export "HITHER_$in_out"
  printf -v "HITHER_${in_out}_URL" "$url"
  export "HITHER_${in_out}_URL"
  if [[ "$url" =~ ^.*\.(csv|hmd|hsd|sql)$ ]]; then
    printf -v "HITHER_$from_to" "${BASH_REMATCH[1]}"
    export "HITHER_$from_to"
  fi
}

# http://www.postgresql.org/docs/9.4/static/libpq-connect.html#AEN41094
# postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
set-vars-from-conninfo-uri() {
  local url="$1"
  local dbtype=
  [[ "$val" =~ ^([a-z]+):// ]] || die
  dbtype="${BASH_REMATCH[1]}"
  if [[ "$dbtype" =~ ^(pg|postgres|postgresql)$ ]]; then dbtype=pg
  elif [[ "$dbtype" =~ ^(my|mysql)$ ]]; then dbtype=my
  elif [[ "$dbtype" =~ ^(lite|sqlite)$ ]]; then dbtype=lite
  else
    die "Unknown database type in URI: '$dbtype'"
  fi
  printf -v "HITHER_$from_to" "$dbtype"
  export "HITHER_$from_to"
  set-export TYPE "$dbtype"
  url="${url/${BASH_REMATCH[1]}:/}"
  url="${url#//}"
  if [[ "$url" =~ (.*?)@ ]]; then
    url="${url#*@}"
    userpass="${BASH_REMATCH[1]}"
    if [[ "$userpass" =~ ^(.*):(.*)$ ]]; then
      set-export USER "${BASH_REMATCH[1]}"
      set-export PASSWORD "${BASH_REMATCH[2]}"
    else
      set-export USER "$userpass"
    fi
  fi
  if [[ "$url" =~ ([^/]+)/(.*) ]]; then
    url="${url%%/*}"
    local path="${BASH_REMATCH[2]}"
    if [[ "$path" =~ \?(.*) ]]; then
      path="${path%%\?*}"
      options="${BASH_REMATCH[1]}"
      IFS=';' read -ra opts <<< "$options"
      for opt in "${opts[@]}"; do
        [[ "$opt" =~ (.+)=(.+) ]] ||
          die "Invalid option '$opt'"
        key="${BASH_REMATCH[1]}"
        val="${BASH_REMATCH[2]}"
        if [ "$key" == table ]; then
          set-export TABLE "$val"
        else
          error "Uknown option '$key'"
        fi
      done
    fi
    set-export DBNAME "$path"
  fi
  if [[ "$url" =~ ^(.*):([0-9]{1,5})$ ]]; then
    set-export HOST "${BASH_REMATCH[1]}"
    set-export PORT "${BASH_REMATCH[2]}"
  else
    set-export HOST "$url"
  fi
}

set-export() {
  local var="HITHER_${in_out}_$1" val="$2"
  printf -v "$var" "$val"
  export "$var"
}

set-vars() {
  local want='hsd|hmd|pg|my|lite|hsd|sql|csv|dbic|django'
  [ -n "$HITHER_FROM" ] ||
    error "Can't determine FROM value. Try using '--from=…'."
  [ -n "$HITHER_TO" ] ||
    error "Can't determine TO value. Try using '--to=…'."
  [[ "$HITHER_FROM" =~ ^($want)$ ]] ||
    error "Invalid FROM value: '$HITHER_FROM'. Want '$want'."
  [[ "$HITHER_TO" =~ ^($want)$ ]] ||
    error "Invalid TO value: '$HITHER_TO'. Want '$want'."
}

check-profile() {
  if [ -n "$HITHER_PROFILE" ]; then
    [ -f "$HITHER_PROFILE" ] ||
      error "Profile '$HITHER_PROFILE' is not a file"
    source "$HITHER_PROFILE"
  fi
}

assert-command() {
  local missing=false
  local cmd
  for cmd in $@; do
    if ! $(type $cmd &> /dev/null); then
      echo "Required command not found: '$cmd'"
      missing=true
    fi
  done
  if "$missing"; then exit 1; fi
}

create-action-command() {
  command="hither-"
  if [ -n "$HITHER_ACTION" ]; then
    command+="$HITHER_ACTION-"
  else
    command+="cmd-"
  fi
  command+="$HITHER_FROM-to-$HITHER_TO"
  if [ -n "$HITHER_WITH" ]; then
    command+="-with-$HITHER_WITH"
  fi
}

export HITHER_BIN="$(cd -P `dirname $BASH_SOURCE` && pwd -P)"
export HITHER_LIB="$(cd -P `dirname $BASH_SOURCE`/../lib && pwd -P)"
export PATH="$HITHER_LIB:$PATH"

[ "${BASH_SOURCE[0]}" != "$0" ] || main "$@"

# vim: set lisp:
