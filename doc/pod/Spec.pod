=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.39.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Hither Specification

Hither is a general purpose database munging tool.

=head2 Overview

Hither's primary goals are:

=over

=item * Provide a CLI command called C<hither>

=item * RDBMS schema and database migration

=over

=item * Non-linear

=item * Reversable

=back

=item * Provide a schema data definition language

=over

=item * Hither Schema Definition (HSD)

=back

=item * Provide a migration data definition language

=over

=item * Hither Migration Definition (HMD)

=back

=item * Programming language agnostic

=item * Database framework agnostic

=item * Schema definition diffing to generate migrations

=item * Smart migration dependency tracking

=item * Generate database files from definitions

=over

=item * DB schema files

=item * DB migration files

=back

=item * Generate ORM code from definitions

=over

=item * DBIx::Class classes for Perl

=item * Django model classes for Python

=item * ActiveRecord classes for Ruby

=back

=back

=head2 Hither Command Actions

The C<hither> command has many actions. Here are some examples:

=over

=item C<< hither make --in=<hsd1> -in=<hsd2> --to=hmd >>

Produce a Hither migration from 2 Hither schemas definitions.

=item C<hither make …>

Generate things from things. Useful for generating ORM code. Examples:

    hither make --in=database.hsd --out=dbix
    hither make --in=database.hsd --out=django

=item C<hither load …>

Import a database from a source. Could be a dump or another database.

=item C<hither info …>

Show info about a data source.

=back

=head2 Data Sources and Targets

=over

=item Databases

Actual live databases.

=item Dumps

Database and schema dumps.

=item Hither Schema Definitions (HSD files)

Hither defined schema data in YAML files.

=item Hither Migration Definitions (HMD files)

Hither defined migration data in YAML files.

=item Migration SQL

SQL files that migrate a specific database in a specific state.

=back

=head2 Hither Migration Strategy

A database is always in a given "state". This state is effectively its schema.
Hither can:

=over

=item * Generate a HSD file from a DB's schema.

=over

=item * HSD is meant to be canonical.

=item * Human edited/maintained.

=item * Everything else generated from it.

=back

=item * Generate a DB schema from a HSD.

=item * Generate ORM code (DBIx::Class, Django) from a HSD.

=item * Diff 2 HSD files to produce a migration.

=back

The state should be given a name. The exact name scheme is yet TBD. It
could be the SHA1 of the HSD file. It could include the branch name of
associated code.

The state-id should be stored in the database. It can be stored in a
C<hither> table.

Each branch of a codebase expects a DB to be in some exact state. The code
should somehow declare the current state-id. If only one codebase is using the
database, the HSD files should be kept in that codebase. The generated ORM
code could have that state-id baked in.

=head2 Implementation Strategy

Hither will start out as a wrapper around other tools. It will patch and fill
in gaps as necessary.

For starters, heavy use will be made of:

=over

=item C<SQL::Translator>

This module does a lot of transformations. It is a good starting point. (It is
the basis of much of DBIx::Class::DeploymentHandler).

=back

=head3 Django migrate

Pythons Django MVC framework has a built-in database migration strategy and
toolset. It appears to be well thought out. Hither will attempt to follow the
Django leads that make sense.

The main difference is that Django uses Python code as the canonical
definition of things to generate other things. Hither uses (langauge agnostic)
data to define all the same things, and generate the same things, including
the Python, Perl, Ruby, etc ORM code.

=head2 Databases of Focus

Eventually all popular, open source databases should be supported. For now
just concentrating on 3 for bootstrapping phase. Having 3 concerns is a good
number for agnostic, yet focused, projects.

=over

=item PostgreSQL

This DB is driving the need for this tool currently.

=item SQLite

Simple, single file, real database. Good for prototyping and testing.

=item CSV

CSV is considered a database since so much open data is in this format.

=back

=head2 ORMs of Focus

The primary focus for now, is Perl's C<DBIx::Class>.

=head2 Sample Usage

    hither load --in=http://opendata.org/some.csv --out=foo.pg
    hither make --in=foo.pg --out=some.hsd
    hither make some1.hsd some2.hsd --out=migrate.hmd
    hither make --in=migrate.hmd --out=sql

=cut
